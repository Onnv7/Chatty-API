// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v3.20.3
// source: proto/user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "user";

export interface ErrorResponse {
  errorMessage: string;
  errorCode: number;
  subErrorMessage?: string | undefined;
  subErrorCode?: number | undefined;
}

export interface Empty {
}

export interface UpdateProfileByIdRequest {
  id: number;
  firstName: string;
  lastName: string;
  gender: string;
  birthDate: string;
  introduction: string;
}

export interface UpdateProfileByIdResponse {
  error?: ErrorResponse | undefined;
  success: boolean;
}

export interface GetProfileByIdRequest {
  id: number;
}

export interface GetProfileByIdData {
  avatarUrl: string;
  email: string;
  firstName: string;
  lastName: string;
  gender: string;
  birthDate: string;
}

export interface GetProfileByIdResponse {
  data?: GetProfileByIdData | undefined;
  error?: ErrorResponse | undefined;
  success: boolean;
}

export interface SearchProfileRequest {
  email: string;
}

export interface SearchProfileData {
  id: number;
  firstName: string;
  lastName: string;
}

export interface SearchProfileResponse {
  data?: SearchProfileData | undefined;
  error?: ErrorResponse | undefined;
  success: boolean;
}

export interface CreateUserProfileRequest {
  email: string;
  firstName: string;
  lastName: string;
  gender: string;
  birthDate: string;
  accountId: number;
}

export interface CreateUserProfileData {
  profileId: number;
}

export interface CreateUserProfileResponse {
  error?: ErrorResponse | undefined;
  data?: CreateUserProfileData | undefined;
  success: boolean;
}

export const USER_PACKAGE_NAME = "user";

export interface ProfileServiceClient {
  createUserProfile(request: CreateUserProfileRequest): Observable<CreateUserProfileResponse>;

  searchProfile(request: SearchProfileRequest): Observable<SearchProfileResponse>;

  getProfileById(request: GetProfileByIdRequest): Observable<GetProfileByIdResponse>;

  updateProfileById(request: UpdateProfileByIdRequest): Observable<UpdateProfileByIdResponse>;
}

export interface ProfileServiceController {
  createUserProfile(
    request: CreateUserProfileRequest,
  ): Promise<CreateUserProfileResponse> | Observable<CreateUserProfileResponse> | CreateUserProfileResponse;

  searchProfile(
    request: SearchProfileRequest,
  ): Promise<SearchProfileResponse> | Observable<SearchProfileResponse> | SearchProfileResponse;

  getProfileById(
    request: GetProfileByIdRequest,
  ): Promise<GetProfileByIdResponse> | Observable<GetProfileByIdResponse> | GetProfileByIdResponse;

  updateProfileById(
    request: UpdateProfileByIdRequest,
  ): Promise<UpdateProfileByIdResponse> | Observable<UpdateProfileByIdResponse> | UpdateProfileByIdResponse;
}

export function ProfileServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createUserProfile", "searchProfile", "getProfileById", "updateProfileById"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProfileService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProfileService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PROFILE_SERVICE_NAME = "ProfileService";

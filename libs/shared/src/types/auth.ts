// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v3.20.3
// source: proto/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

export interface ErrorResponse {
  errorMessage: string;
  errorCode: number;
  subErrorMessage?: string | undefined;
  subErrorCode?: number | undefined;
}

export interface Empty {
}

export interface VerifyTokenRequest {
  token: string;
}

export interface VerifyTokenResponse {
  error?: ErrorResponse | undefined;
  success: boolean;
}

export interface SendVerificationTokenResponse {
  error?: ErrorResponse | undefined;
  success: boolean;
}

export interface SendVerificationTokenRequest {
  email: string;
}

export interface VerifyCodeRequest {
  email: string;
  code: string;
}

export interface VerifyCodeResponse {
  error?: ErrorResponse | undefined;
  success: boolean;
}

export interface SendVerificationCodeRequest {
  email: string;
}

export interface SendVerificationCodeResponse {
  error?: ErrorResponse | undefined;
  success: boolean;
}

export interface UpdatePasswordRequest {
  accountId: number;
  oldPassword: string;
  newPassword: string;
}

export interface UpdatePasswordResponse {
  error?: ErrorResponse | undefined;
  success: boolean;
}

export interface LoginAccountRequest {
  username: string;
  password: string;
}

export interface LoginAccountData {
  accessToken: string;
  refreshToken: string;
  profileId: number;
}

export interface LoginAccountResponse {
  data?: LoginAccountData | undefined;
  error?: ErrorResponse | undefined;
  success: boolean;
}

export interface VerifyJwtRequest {
  token: string;
}

export interface VerifyJwtData {
  id: number;
  email: string;
}

export interface VerifyJwtResponse {
  data?: VerifyJwtData | undefined;
  error?: ErrorResponse | undefined;
  success: boolean;
}

export interface RegisterAccountRequest {
  email: string;
  firstName: string;
  lastName: string;
  password: string;
  birthDate: string;
  gender: string;
}

export interface RegisterAccountResponse {
  error?: ErrorResponse | undefined;
  success: boolean;
}

export const AUTH_PACKAGE_NAME = "auth";

export interface AuthServiceClient {
  registerAccount(request: RegisterAccountRequest): Observable<RegisterAccountResponse>;

  verifyJwt(request: VerifyJwtRequest): Observable<VerifyJwtResponse>;

  loginAccount(request: LoginAccountRequest): Observable<LoginAccountResponse>;

  updatePassword(request: UpdatePasswordRequest): Observable<UpdatePasswordResponse>;

  sendVerificationCode(request: SendVerificationCodeRequest): Observable<SendVerificationCodeResponse>;

  sendVerificationToken(request: SendVerificationTokenRequest): Observable<SendVerificationTokenResponse>;

  verifyCode(request: VerifyCodeRequest): Observable<VerifyCodeResponse>;

  verifyToken(request: VerifyTokenRequest): Observable<VerifyTokenResponse>;
}

export interface AuthServiceController {
  registerAccount(
    request: RegisterAccountRequest,
  ): Promise<RegisterAccountResponse> | Observable<RegisterAccountResponse> | RegisterAccountResponse;

  verifyJwt(request: VerifyJwtRequest): Promise<VerifyJwtResponse> | Observable<VerifyJwtResponse> | VerifyJwtResponse;

  loginAccount(
    request: LoginAccountRequest,
  ): Promise<LoginAccountResponse> | Observable<LoginAccountResponse> | LoginAccountResponse;

  updatePassword(
    request: UpdatePasswordRequest,
  ): Promise<UpdatePasswordResponse> | Observable<UpdatePasswordResponse> | UpdatePasswordResponse;

  sendVerificationCode(
    request: SendVerificationCodeRequest,
  ): Promise<SendVerificationCodeResponse> | Observable<SendVerificationCodeResponse> | SendVerificationCodeResponse;

  sendVerificationToken(
    request: SendVerificationTokenRequest,
  ): Promise<SendVerificationTokenResponse> | Observable<SendVerificationTokenResponse> | SendVerificationTokenResponse;

  verifyCode(
    request: VerifyCodeRequest,
  ): Promise<VerifyCodeResponse> | Observable<VerifyCodeResponse> | VerifyCodeResponse;

  verifyToken(
    request: VerifyTokenRequest,
  ): Promise<VerifyTokenResponse> | Observable<VerifyTokenResponse> | VerifyTokenResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "registerAccount",
      "verifyJwt",
      "loginAccount",
      "updatePassword",
      "sendVerificationCode",
      "sendVerificationToken",
      "verifyCode",
      "verifyToken",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
